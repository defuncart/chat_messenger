import 'dart:async';

import 'package:flutter/material.dart';

/// This class is generated by the flappy_translator package
/// Please do not change anything manually in this file, instead re-generate it when changes are available
class I18n {
  static String get appTitle => _getText('appTitle');

  static String get generalNext => _getText('generalNext');

  static String get generalCancel => _getText('generalCancel');

  static String get generalDelete => _getText('generalDelete');

  static String get popupSomethingWentWrongTitle =>
      _getText('popupSomethingWentWrongTitle');

  static String get popupSomethingWentWrongDescription =>
      _getText('popupSomethingWentWrongDescription');

  static String get popupSomethingWentWrongButton =>
      _getText('popupSomethingWentWrongButton');

  static String get createUserScreenUsernameTextFieldHint =>
      _getText('createUserScreenUsernameTextFieldHint');

  static String get chatScreenMessageTextFieldHint =>
      _getText('chatScreenMessageTextFieldHint');

  static String get deleteMessagePopupTitle =>
      _getText('deleteMessagePopupTitle');

  static String get deleteMessagePopupDescription =>
      _getText('deleteMessagePopupDescription');

  static Map<String, String> _localizedValues;

  static Map<String, String> _enValues = {
    'appTitle': 'Chat Messenger',
    'generalNext': 'Next',
    'generalCancel': 'Cancel',
    'generalDelete': 'Delete',
    'popupSomethingWentWrongTitle': 'Something went wrong',
    'popupSomethingWentWrongDescription': 'Please try again',
    'popupSomethingWentWrongButton': 'Try again',
    'createUserScreenUsernameTextFieldHint': 'Please enter a username',
    'chatScreenMessageTextFieldHint': 'Message',
    'deleteMessagePopupTitle': 'Delete Message?',
    'deleteMessagePopupDescription':
        'This message will be permanently deleted from this chat.',
  };

  static Map<String, String> _deValues = {
    'appTitle': 'Chat Messenger',
    'generalNext': 'Fortfahren',
    'generalCancel': 'Abbrechen',
    'generalDelete': 'Löschen',
    'popupSomethingWentWrongTitle': 'Etwas ist schief gelaufen',
    'popupSomethingWentWrongDescription': 'Bitte versuch es erneut',
    'popupSomethingWentWrongButton': 'Erneut versuchen',
    'createUserScreenUsernameTextFieldHint': 'Bitte gib einen Benutzernamen an',
    'chatScreenMessageTextFieldHint': 'Nachricht',
    'deleteMessagePopupTitle': 'Nachricht löschen?',
    'deleteMessagePopupDescription':
        'Diese Nachricht wird aus diesem Chat dauerhaft gelöscht.',
  };

  static Map<String, Map<String, String>> _allValues = {
    'en': _enValues,
    'de': _deValues,
  };

  I18n(Locale locale) {
    _locale = locale;
    _localizedValues = null;
  }

  static Locale _locale;

  static String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<I18n> load(Locale locale) async {
    final translations = I18n(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
    Locale('de'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}
